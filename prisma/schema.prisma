generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  ADMIN
  USER
}

enum PaymentStatus {
  PENDING
  PAID
  CANCELLED
  REFUND
}

enum OrderStatus {
  PROCESSING
  SHIPPING
  COMPLETED
  REFUND
  CANCELLED
}

model User {
  id                    Int            @id @default(autoincrement())
  email                 String         @unique
  name                  String
  password              String
  role                  Role           @default(USER)
  permissions           String[]
  phone                 String?
  address               String?
  city                  String?
  province              String?
  country               String?
  postalCode            String?
  socialMedia           Json           @default("{}")
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @default(now())
  conversationsStarted  Conversation[] @relation("UserConversations")
  assignedConversations Conversation[] @relation("AdminAssignments")
  sentMessages          ChatMessage[]
  orders                Order[]
  cart                  Cart?
}

model Language {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  isActive  Boolean  @default(true)
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Currency {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  symbol    String
  isActive  Boolean  @default(true)
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  productPrices      ProductPrice[]
  shippingZonePrices ShippingZonePrice[]
  shippingRatePrices ShippingRatePrice[]
}

model Category {
  id            Int           @id @default(autoincrement())
  name          Json          // { "id": "...", "en": "...", ... }
  subCategories SubCategory[]
}

model SubCategory {
  id         Int       @id @default(autoincrement())
  name       Json      // Multilang
  category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int
  products   Product[]
  @@unique([categoryId, name])
}

model Product {
  id            Int            @id @default(autoincrement())
  name          Json           // Multilang
  variant       Json           // Multilang
  stock         Int            @default(0)
  weight        Float?
  careDetails   Json           @default("[]")
  description   Json?          // Multilang
  isBestProduct Boolean        @default(false)
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
  images        ProductImage[]
  subCategory   SubCategory    @relation(fields: [subCategoryId], references: [id])
  subCategoryId Int
  orderItems    OrderItem[]
  prices        ProductPrice[] // Multicurrency
  cartItems     CartItem[]
}

model ProductPrice {
  id         Int      @id @default(autoincrement())
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  Int
  currency   Currency @relation(fields: [currencyId], references: [id])
  currencyId Int
  price      Float
  @@unique([productId, currencyId])
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

model Testimonial {
  id        Int      @id @default(autoincrement())
  author    String
  quote     Json     // Multilang
  rating    Int
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model PaymentMethod {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  code      String   @unique
  isActive  Boolean  @default(true)
  config    Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  orders    Order[]
}

model Order {
  id              Int            @id @default(autoincrement())
  user            User           @relation(fields: [userId], references: [id])
  userId          Int
  address         String
  shippingCost    Float
  subtotal        Float
  total           Float
  paymentStatus   PaymentStatus  @default(PENDING)
  orderStatus     OrderStatus    @default(PROCESSING)
  paymentMethod   PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId Int?
  orderItems      OrderItem[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @default(now())
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  price     Float
  qty       Int
  subtotal  Float
}

model ShippingProvider {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  code        String   @unique
  isActive    Boolean  @default(false)
  credentials Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

model ShippingZone {
  id        Int                  @id @default(autoincrement())
  name      String               @unique
  isActive  Boolean              @default(true)
  prices    ShippingZonePrice[]  // multicurrency
  rates     ShippingRate[]
  createdAt DateTime             @default(now())
  updatedAt DateTime             @default(now())
}

model ShippingZonePrice {
  id             Int          @id @default(autoincrement())
  shippingZone   ShippingZone @relation(fields: [shippingZoneId], references: [id], onDelete: Cascade)
  shippingZoneId Int
  currency       Currency     @relation(fields: [currencyId], references: [id])
  currencyId     Int
  price          Float
  @@unique([shippingZoneId, currencyId])
}

model ShippingRate {
  id        Int                 @id @default(autoincrement())
  city      String
  isActive  Boolean             @default(true)
  zone      ShippingZone        @relation(fields: [zoneId], references: [id], onDelete: Cascade)
  zoneId    Int
  prices    ShippingRatePrice[] // multicurrency
  createdAt DateTime            @default(now())
  updatedAt DateTime            @default(now())
}

model ShippingRatePrice {
  id             Int          @id @default(autoincrement())
  shippingRate   ShippingRate @relation(fields: [shippingRateId], references: [id], onDelete: Cascade)
  shippingRateId Int
  currency       Currency     @relation(fields: [currencyId], references: [id])
  currencyId     Int
  price          Float
  @@unique([shippingRateId, currencyId])
}

model Conversation {
  id           Int          @id @default(autoincrement())
  status       String       @default("OPEN")
  user         User         @relation("UserConversations", fields: [userId], references: [id])
  userId       Int
  assignedTo   User?        @relation("AdminAssignments", fields: [assignedToId], references: [id])
  assignedToId Int?
  messages     ChatMessage[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now())
}

model ChatMessage {
  id             Int          @id @default(autoincrement())
  content        String       @db.Text
  isRead         Boolean      @default(false)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId Int
  sender         User         @relation(fields: [senderId], references: [id])
  senderId       Int
  createdAt      DateTime     @default(now())
}

model GeneralSetting {
  id              Int      @id @default(1)
  shopName        Json?   // Multilang: { "id": "...", "en": "...", ... }
  shopDescription Json?   // Multilang
  logoUrl         String?
  faviconUrl      String?
  bannerImageUrl  String?
  bannerVideoUrl  String?
  address         String?  @db.Text
  socialMedia     Json     @default("{}")
  telegramBotToken  String? 
  telegramChatId    String? 
  shippingMode      String   @default("manual") // "manual" or "auto"
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
}

model Cart {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id])
  userId    Int        @unique // Setiap user hanya punya satu cart
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  quantity  Int
  
  @@unique([cartId, productId]) // Pastikan tidak ada produk duplikat dalam satu cart
}
