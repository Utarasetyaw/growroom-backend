generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  ADMIN
  USER
}

enum PaymentStatus {
  PENDING
  PAID
  CANCELLED
  REFUND
}

enum OrderStatus {
  PROCESSING   // Diproses
  SHIPPING     // Dikirim
  COMPLETED    // Selesai
  REFUND
  CANCELLED
}

model User {
  id                    Int            @id @default(autoincrement())
  email                 String         @unique
  name                  String
  password              String
  role                  Role           @default(USER)
  permissions           String[]
  phone                 String?        // <--- Tambahkan nomor HP
  address               String?        // <--- Alamat jalan/lengkap
  city                  String?        // <--- Kota
  province              String?        // <--- Provinsi
  country               String?        // <--- Negara
  postalCode            String?        // <--- Kode pos
  socialMedia           Json           @default("{}") // <--- ig, facebook, tiktok dst
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @default(now())
  conversationsStarted  Conversation[] @relation("UserConversations")
  assignedConversations Conversation[] @relation("AdminAssignments")
  sentMessages          ChatMessage[]
  orders                Order[]
}

model Category {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  subCategories SubCategory[]
}

model SubCategory {
  id         Int       @id @default(autoincrement())
  name       String
  category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int
  products   Product[]

  @@unique([name, categoryId])
}

model Product {
  id            Int           @id @default(autoincrement())
  name          String
  price         Float
  variant       String
  stock         Int           @default(0)
  weight        Float?
  careDetails   Json          @default("{}")
  isBestProduct Boolean       @default(false)
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now())
  images        ProductImage[]
  subCategory   SubCategory   @relation(fields: [subCategoryId], references: [id])
  subCategoryId Int
  orderItems    OrderItem[]
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

model Testimonial {
  id        Int      @id @default(autoincrement())
  author    String
  quote     String
  rating    Int
  imageUrl  String? 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PaymentMethod {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  code      String   @unique
  isActive  Boolean  @default(true)
  config    Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  orders    Order[]
}

model Order {
  id              Int            @id @default(autoincrement())
  user            User           @relation(fields: [userId], references: [id])
  userId          Int
  address         String
  shippingCost    Float
  subtotal        Float
  total           Float
  paymentStatus   PaymentStatus  @default(PENDING)
  orderStatus     OrderStatus    @default(PROCESSING)
  paymentMethod   PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId Int?
  orderItems      OrderItem[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @default(now())
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  price     Float    // harga produk saat order
  qty       Int
  subtotal  Float
}

model Language {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  isActive  Boolean  @default(true)
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Currency {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  symbol    String
  isActive  Boolean  @default(true)
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model ShippingProvider {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  code        String   @unique
  isActive    Boolean  @default(false)
  credentials Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

model ShippingZone {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  price     Float    
  isActive  Boolean  @default(true)
  rates     ShippingRate[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model ShippingRate {
  id        Int      @id @default(autoincrement())
  city      String
  price     Float
  isActive  Boolean  @default(true)
  zone      ShippingZone @relation(fields: [zoneId], references: [id], onDelete: Cascade)
  zoneId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Conversation {
  id           Int          @id @default(autoincrement())
  status       String       @default("OPEN")
  user         User         @relation("UserConversations", fields: [userId], references: [id])
  userId       Int
  assignedTo   User?        @relation("AdminAssignments", fields: [assignedToId], references: [id])
  assignedToId Int?
  messages     ChatMessage[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now())
}

model ChatMessage {
  id             Int          @id @default(autoincrement())
  content        String       @db.Text
  isRead         Boolean      @default(false)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId Int
  sender         User         @relation(fields: [senderId], references: [id])
  senderId       Int
  createdAt      DateTime     @default(now())
}

model GeneralSetting {
  id              Int      @id @default(1)
  logoUrl         String?
  faviconUrl      String?
  bannerImageUrl  String?
  bannerVideoUrl  String?
  shopDescription String?  @db.Text
  address         String?  @db.Text
  socialMedia     Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
}
